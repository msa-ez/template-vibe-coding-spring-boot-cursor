---
description: Guidelines for files that must be generated and deployed for microservice implementation and deployment using the Spring Boot framework in MSA-based project construction.
alwaysApply: false
---
When generating code for Spring Boot framework based on PRD, the following files must be created and added under Root or each service.

1. Dockerfile
Location: boundedContext.nameCamelCase/
Filename: Dockerfile
```
FROM openjdk:21-jdk-slim
COPY target/*SNAPSHOT.jar app.jar
EXPOSE 8080
ENV TZ=Asia/Seoul
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
ENTRYPOINT ["java","-Xmx400M","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar","--spring.profiles.active=docker"]

```

2. Manifests
Location: boundedContext.nameCamelcase/kubernetes/
Filename: deployment.yaml, service.yaml

deployment.yaml example
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order
  labels:
    app: order
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order
  template:
    metadata:
      labels:
        app: order
    spec:
      containers:
        - name: order
          image: "username/order:latest"
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: '/actuator/health'
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 2
            periodSeconds: 5
            failureThreshold: 10
          livenessProbe:
            httpGet:
              path: '/actuator/health'
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 2
            periodSeconds: 5
            failureThreshold: 5

```

service.yaml example
```
apiVersion: v1
kind: Service
metadata:
  name: order
  labels:
    app: order
spec:
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: order
```

3. Gateway
Location: Root
Filename: Essential configurations including application.yaml (pom.xml, Application.java ...)

application.yaml example (routes for each service are created with reference to port)
```
server:
  port: 8088

---


spring:
  profiles: default
  cloud:
    gateway:
#<<< API Gateway / Routes
      routes:
        - id: order
          uri: http://localhost:8082
          predicates:
            - Path=/aggregates.namePlural, /views/namePlural...
        - id: customercenter
          uri: http://localhost:8083
          predicates:
            - Path=, /myPages/**
        - id: frontend
          uri: http://localhost:8080
          predicates:
            - Path=/**
#>>> API Gateway / Routes
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins:
              - "*"
            allowedMethods:
              - "*"
            allowedHeaders:
              - "*"
            allowCredentials: true


---


spring:
  profiles: docker
  cloud:
    gateway:
      routes:
        - id: order
          uri: http://order:8080
          predicates:
            - Path=/orders/**, 
        - id: customercenter
          uri: http://customercenter:8080
          predicates:
            - Path=, 
        - id: frontend
          uri: http://frontend:8080
          predicates:
            - Path=/**
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins:
              - "*"
            allowedMethods:
              - "*"
            allowedHeaders:
              - "*"
            allowCredentials: true

server:
  port: 8080

```

4. kafka
Location: Root/infra/
Filename: docker-compose.yml

docker-compose.yml
```
services:
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"   # For client communication
    environment:
      # KRaft mode essential settings
      CLUSTER_ID: "kraft-cluster-01"
      KAFKA_KRAFT_MODE: "true"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: "1"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"

      # Listener settings
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER

      # Other essential settings
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_DIRS: "/var/lib/kafka/data"
    volumes:
      - kafka-data:/var/lib/kafka/data

    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --list --bootstrap-server localhost:9092 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  kafka-data:
```

Notes
1. For gateway, if it has already been created, only additional application.yml route settings should be added.
   
   **Example: Adding routes when gateway exists and delivery service is created**
   
   Existing gateway/src/main/resources/application.yml:
   ```yaml
   spring:
     profiles: default
     cloud:
       gateway:
   #<<< API Gateway / Routes
         routes:
           - id: author
             uri: http://localhost:8082
             predicates:
               - Path=/authors/**
           - id: writing
             uri: http://localhost:8083
             predicates:
               - Path=/manuscripts/**
           - id: frontend
             uri: http://localhost:8080
             predicates:
               - Path=/**
   #>>> API Gateway / Routes
   ```
   
   Route added when delivery service is created:
   ```yaml
   spring:
     profiles: default
     cloud:
       gateway:
   #<<< API Gateway / Routes
         routes:
           - id: author
             uri: http://localhost:8082
             predicates:
               - Path=/authors/**
           - id: writing
             uri: http://localhost:8083
             predicates:
               - Path=/manuscripts/**
           - id: delivery  # Newly added route
             uri: http://localhost:8084
             predicates:
               - Path=/deliveries/**
           - id: frontend
             uri: http://localhost:8080
             predicates:
               - Path=/**
   #>>> API Gateway / Routes
   ```
   
   Same addition should be made to Docker profile:
   ```yaml
   spring:
     profiles: docker
     cloud:
       gateway:
         routes:
           - id: author
             uri: http://author:8080
             predicates:
               - Path=/authors/**
           - id: writing
             uri: http://writing:8080
             predicates:
               - Path=/manuscripts/**
           - id: delivery  # Newly added route
             uri: http://delivery:8080
             predicates:
               - Path=/deliveries/**
           - id: frontend
             uri: http://frontend:8080
             predicates:
               - Path=/**
   ```
2. For kafka, if it has already been created, no additional creation should be done.