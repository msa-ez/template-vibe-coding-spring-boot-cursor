---

description: Spring Boot DDD Extension에 따른 도메인 이벤트 발행 및 처리 규칙을 적용할 때 사용됩니다. EventListener 및 registerEvent()와 관련된 로직 처리 요구사항을 포함합니다.
alwaysApply: false
---

Spring Boot DDD Extension 코드는 아래 요구사항을 참조하여 구조화되어야 합니다.

1. 애그리게이트 루트 엔티티는 `AbstractAggregateRoot`를 상속받고 `registerEvent()`를 사용하여 도메인 이벤트를 등록해야 합니다.
2. 도메인 이벤트 클래스는 단순한 POJO이며, 주문, 결제 등과 같은 다양한 이벤트 타입이 있습니다. (`OrderPlacedEvent`, `PaymentCompletedEvent` 등).
3. `@TransactionalEventListener`를 사용하는 컴포넌트 클래스는 여러 이벤트 핸들러 메서드를 가져야 하며, 각 메서드는 각 이벤트 타입을 담당합니다.
4. 각 이벤트 핸들러 메서드는 `KafkaTemplate<String, String>`을 사용하여 Kafka에 메시지를 발행합니다.
5. Kafka 토픽 이름은 프로젝트 이름({{options.package}})으로 일괄 설정되며, @fixed-generation-rules에 정의된 Kafka 인프라 설정과 연동하여 동작합니다.
6. 이벤트는 트랜잭션 커밋 후에 처리되어야 하므로 `@TransactionalEventListener(phase = AFTER_COMMIT)`을 사용합니다.

## Spring Cloud Stream 이벤트 발행 가이드라인

### **중요**: StreamBridge 채널 명명 규칙
Spring Cloud Stream과 StreamBridge를 사용하여 이벤트를 발행할 때:

**❌ 잘못된 채널 명명:**
예시
```java
streamBridge.send("authorRegistered-out-0", event);  // "Dispatcher has no subscribers" 오류 발생
```

**✅ 올바른 채널 명명:**
```java
streamBridge.send("authorRegistered", event);  // 단순한 채널 이름 사용
```

### 필수 구성

#### 1. EventHandler 구현
예시
```java
@Component
public class EventHandler {
    
    @Autowired
    private StreamBridge streamBridge;
    
    @EventListener
    public void whenAuthorRegistered_then_Publish(AuthorRegistered authorRegistered) {
        streamBridge.send("authorRegistered", authorRegistered);  // 단순한 채널 이름
    }
}
```

#### 2. application.yml 구성
Spring Cloud Stream 구성은 @technical-stack의 "메시징 및 이벤트 처리" 섹션을 참조하세요.

### 일반적인 오류 방지
- **StreamBridge.send() 채널 이름에 `-out-0` 접미사를 절대 사용하지 마세요**
- Spring Cloud Stream이 자동으로 `-out-0` 접미사를 추가하여 바인딩 이름을 생성합니다
- 도메인 이벤트와 일치하는 단순한 채널 이름을 사용하세요
- Kafka 서비스 실행 요구사항은 @fixed-generation-rules의 kafka 섹션을 참조하세요

### 채널 명명 패턴
- StreamBridge 채널: `eventName` (예: "이벤트 스티커 이름")
- 바인딩 구성: `eventName-out-0` (예: "event-out-0")
- Kafka 토픽: 프로젝트 이름으로 일괄 설정 ("{{options.package}}")

### Kafka 인프라 연동
- @fixed-generation-rules에 정의된 docker-compose.yml의 Kafka 설정과 연동
- `KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"` 설정으로 토픽 자동 생성 지원
- 모든 이벤트는 동일한 프로젝트 토픽("{{options.package}}")으로 발행되어 일관성 유지
