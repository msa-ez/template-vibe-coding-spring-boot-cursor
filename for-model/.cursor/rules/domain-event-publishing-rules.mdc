---

description: Used when applying domain event publishing and processing rules according to Spring Boot DDD Extension. It includes requirements for logic processing related to EventListener and registerEvent()
alwaysApply: false
---

The code for Spring Boot DDD Extension must be structured with reference to the requirements below.

1. Aggregate root entities must inherit from `AbstractAggregateRoot` and register domain events using `registerEvent()`.
2. Domain event classes are simple POJOs, and there are various event types such as orders, payments, etc. (`OrderPlacedEvent`, `PaymentCompletedEvent`, etc.).
3. Component classes using `@TransactionalEventListener` should have multiple event handler methods, with one method responsible for each type of event.
4. Each event handler method publishes messages to Kafka, using `KafkaTemplate<String, String>`.
5. Kafka topic names are either automatically set based on the event class name or explicitly written.
6. Events must be processed after transaction commits, so use `@TransactionalEventListener(phase = AFTER_COMMIT)`.

## Spring Cloud Stream Event Publishing Guidelines

### **CRITICAL**: Channel Naming for StreamBridge
When using Spring Cloud Stream with StreamBridge for event publishing:

**❌ Wrong Channel Naming:**
Example
```java
streamBridge.send("authorRegistered-out-0", event);  // Causes "Dispatcher has no subscribers" error
```

**✅ Correct Channel Naming:**
```java
streamBridge.send("authorRegistered", event);  // Use simple channel name
```

### Required Configuration

#### 1. EventHandler Implementation
Example
```java
@Component
public class EventHandler {
    
    @Autowired
    private StreamBridge streamBridge;
    
    @EventListener
    public void whenAuthorRegistered_then_Publish(AuthorRegistered authorRegistered) {
        streamBridge.send("authorRegistered", authorRegistered);  // Simple channel name
    }
}
```

#### 2. application.yml Configuration
For Spring Cloud Stream configuration, refer to the "Messaging and Event Processing" section in @technical-stack.

### Common Error Prevention
- **Never use `-out-0` suffix in StreamBridge.send() channel names**
- Spring Cloud Stream automatically adds the `-out-0` suffix to create binding names
- Use simple channel names that match your domain events
- For Kafka service execution requirements, refer to the kafka section in @fixed-generation-rules

### Channel Naming Pattern
- StreamBridge channel: `eventName` (e.g., "event sticker name")
- Binding configuration: `eventName-out-0` (e.g., "event-out-0")
- Kafka topic: Use consistent topic naming (e.g., "{{options.package}}")
